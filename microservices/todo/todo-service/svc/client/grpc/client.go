// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: ef2331b7e2
// Version Date: 2020-10-07T23:22:38Z

// Package grpc provides a gRPC client for the Todo service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "todo"
	"todo/todo-service/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.TodoServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var additemEndpoint endpoint.Endpoint
	{
		additemEndpoint = grpctransport.NewClient(
			conn,
			"todo.Todo",
			"AddItem",
			EncodeGRPCAddItemRequest,
			DecodeGRPCAddItemResponse,
			pb.ItemResponse{},
			clientOptions...,
		).Endpoint()
	}

	var deleteitemEndpoint endpoint.Endpoint
	{
		deleteitemEndpoint = grpctransport.NewClient(
			conn,
			"todo.Todo",
			"DeleteItem",
			EncodeGRPCDeleteItemRequest,
			DecodeGRPCDeleteItemResponse,
			pb.ItemResponse{},
			clientOptions...,
		).Endpoint()
	}

	var listallEndpoint endpoint.Endpoint
	{
		listallEndpoint = grpctransport.NewClient(
			conn,
			"todo.Todo",
			"ListAll",
			EncodeGRPCListAllRequest,
			DecodeGRPCListAllResponse,
			pb.ListResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		AddItemEndpoint:    additemEndpoint,
		DeleteItemEndpoint: deleteitemEndpoint,
		ListAllEndpoint:    listallEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCAddItemResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC additem reply to a user-domain additem response. Primarily useful in a client.
func DecodeGRPCAddItemResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ItemResponse)
	return reply, nil
}

// DecodeGRPCDeleteItemResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC deleteitem reply to a user-domain deleteitem response. Primarily useful in a client.
func DecodeGRPCDeleteItemResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ItemResponse)
	return reply, nil
}

// DecodeGRPCListAllResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC listall reply to a user-domain listall response. Primarily useful in a client.
func DecodeGRPCListAllResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ListResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCAddItemRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain additem request to a gRPC additem request. Primarily useful in a client.
func EncodeGRPCAddItemRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.AddItemRequest)
	return req, nil
}

// EncodeGRPCDeleteItemRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain deleteitem request to a gRPC deleteitem request. Primarily useful in a client.
func EncodeGRPCDeleteItemRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.DeleteItemRequest)
	return req, nil
}

// EncodeGRPCListAllRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain listall request to a gRPC listall request. Primarily useful in a client.
func EncodeGRPCListAllRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.EmptyRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
